{
    // Snippet file for VSCode
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    "my-libraries": {
        "prefix": "im",
        "body": [
            "from datetime import datetime",
            "import pandas as pd",
            "import numpy as np",
            "import os",
            "import re",
            "\n"
        ],
        "description": "import the frequently used libraries"
    },
    "my-for-dictionary": {
        "prefix": "fd",
        "body": [
            "for key_, value_ in ${1:dct_}.items():",
            "\tif '$2' in key_:",
            "\t\tprint(key_,value_)"
        ],
        "description": "for loop for dictionary"
    },
    "my-try": {
        "prefix": "try",
        "body": [
            "try:",
            "   $1",
            "except Exception as e:",
            "   print('Error',  e)",
            "finally:",
            "   $3",
        ],
        "description": "try except finally"
    },
    "my-if": {
        "prefix": "iff",
        "body": [
            "if $1:",
            "    $2",
            "elif $3:",
            "    $4",
            "else:",
            "    $5",
        ],
        "description": "try except finally"
    },
    "my-now": {
        "prefix": "now",
        "body": [
            "datetime.now()"
        ],
        "description": "writes: = datetime.now()"
    },
    "my-def-function": {
        "prefix": "deff",
        "body": [
            "def ${1:function_name}(${2:DF}, $3):",
            "    $4",
            "    return ",
            "\n",
            "$1()"
        ],
        "description": "def function"
    },
    "my-for-item": {
        "prefix": "fi",
        "body": [
            "for int_i, item in enumerate(${1:lst_}):",
            "\tprint(f'{len(${1:lst_})-int_i} \\t| {item}')"
        ],
        "description": "for loop with enumeration"
    },
    "my-for-item-if": {
        "prefix": "fii",
        "body": [
            "for item in ${1:lst_}:",
            "    if item == $2:",
            "        print(f'{item} \\t| $3')"
        ],
        "description": "for loop with enumeration"
    },
    "my-Print ": {
        "prefix": "pf",
        "body": [
            "print(f'{$1} \\t| {$2}')"
        ],
        "description": "print(f'{} \t| {}')"
    },
    "my-Print2 ": {
        "prefix": "pr",
        "body": [
            "print($1)"
        ],
        "description": "print()"
    },
    "my-index-contains ": {
        "prefix": "indcon",
        "body": [
            "index_${1:special} = ${2:df}[${2}['${3:Column_name}'].str.contains('$4', case = False, na=False, regex=False)]",
            "print(index_$1.sum())",
            "${2}.loc[index_$1, :]${0:.head()}"
        ],
        "description": "searches for a partial string in column of df"
    },
    "my-index-equals ": {
        "prefix": "indq",
        "body": [
            "index_${1:special} = ${2:df}[${2}['${3:Column_name}'] == $4]",
            "print(index_$1.sum())",
            "${2}.loc[index_$1, :]${0:.head()}"
        ],
        "description": "searches for a value in column of df"
    },
    "my-clocl time": {
        "prefix": "time_",
        "body": [
            "datetime.now().strftime('%H.%M.%S')"
        ],
        "description": "returns %H.%M.%S"
    },
    "my-date": {
        "prefix": "date_",
        "body": [
            "datetime.now().strftime('%Y-%m-%d')"
        ],
        "description": "returns date (%Y-%m-%d)"
    },
    "my-now ": {
        "prefix": "now_",
        "body": [
            "datetime.now().strftime('%Y-%m-%d %H.%M.%S')"
        ],
        "description": "returns now (%Y-%m-%d %H.%M.%S)"
    },
}
